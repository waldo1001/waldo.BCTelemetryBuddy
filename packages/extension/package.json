{
    "name": "bc-telemetry-buddy",
    "displayName": "BC Telemetry Buddy",
    "description": "Query Business Central telemetry from VSCode using natural language with GitHub Copilot",
    "version": "0.1.1",
    "publisher": "waldoBC",
    "license": "MIT",
    "icon": "images/waldo.png",
    "engines": {
        "vscode": "^1.85.0"
    },
    "categories": [
        "Other",
        "Data Science"
    ],
    "keywords": [
        "business-central",
        "telemetry",
        "application-insights",
        "kusto",
        "kql",
        "copilot"
    ],
    "activationEvents": [
        "onStartupFinished"
    ],
    "main": "./dist/extension.js",
    "repository": {
        "type": "git",
        "url": "https://github.com/waldo1001/waldo.BCTelemetryBuddy.git"
    },
    "bugs": {
        "url": "https://github.com/waldo1001/waldo.BCTelemetryBuddy/issues"
    },
    "homepage": "https://github.com/waldo1001/waldo.BCTelemetryBuddy#readme",
    "contributes": {
        "languages": [
            {
                "id": "kql",
                "aliases": [
                    "Kusto Query Language",
                    "KQL"
                ],
                "extensions": [
                    ".kql"
                ],
                "configuration": "./language-configuration.json"
            }
        ],
        "commands": [
            {
                "command": "bctb.setupWizard",
                "title": "BC Telemetry Buddy: Setup Wizard",
                "icon": "$(gear)"
            },
            {
                "command": "bctb.startMCP",
                "title": "BC Telemetry Buddy: Start MCP Server"
            },
            {
                "command": "bctb.runKQLQuery",
                "title": "BC Telemetry Buddy: Run KQL Query"
            },
            {
                "command": "bctb.runKQLFromDocument",
                "title": "BC Telemetry Buddy: Run KQL From Document"
            },
            {
                "command": "bctb.saveQuery",
                "title": "BC Telemetry Buddy: Save Query"
            },
            {
                "command": "bctb.openQueriesFolder",
                "title": "BC Telemetry Buddy: Open Queries Folder"
            },
            {
                "command": "bctb.clearCache",
                "title": "BC Telemetry Buddy: Clear Cache"
            },
            {
                "command": "bctb.showCacheStats",
                "title": "BC Telemetry Buddy: Show Cache Statistics"
            }
        ],
        "mcpServerDefinitionProviders": [
            {
                "id": "bc-telemetry-buddy.mcp-server",
                "label": "BC Telemetry Buddy MCP Server"
            }
        ],
        "languageModelTools": [
            {
                "name": "bctb_query_telemetry",
                "displayName": "Query BC Telemetry",
                "modelDescription": "Executes telemetry queries against Business Central Application Insights. CRITICAL WORKFLOW - Follow this order: (1) For exploratory/generic BC telemetry questions (errors, performance, usage patterns), you MUST call get_event_catalog FIRST to discover relevant event IDs and understand what telemetry is available; (2) Then call get_event_schema for the specific event ID to see available customDimensions fields; (3) For customer-specific queries, call get_tenant_mapping to resolve company names to tenant IDs; (4) Check search_queries or get_saved_queries for similar existing patterns; (5) ONLY THEN execute this tool with either direct KQL or natural language. If you skip discovery steps (catalog/schema/saved queries), you risk querying wrong events or missing critical fields. The backend handles KQL generation via pattern matching when you provide natural language, but it needs the context from prior discovery steps to generate accurate queries.",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "kql": {
                            "type": "string",
                            "description": "Direct KQL query string to execute (optional if nl provided)"
                        },
                        "nl": {
                            "type": "string",
                            "description": "Natural language description of what to query - the MCP backend will find similar saved query patterns and generate KQL automatically (optional if kql provided)"
                        },
                        "useContext": {
                            "type": "boolean",
                            "description": "Whether MCP should search saved queries in workspace for pattern matching when translating nl to KQL",
                            "default": true
                        },
                        "includeExternal": {
                            "type": "boolean",
                            "description": "Whether MCP should search external reference queries for pattern matching when translating nl to KQL",
                            "default": true
                        }
                    }
                }
            },
            {
                "name": "bctb_get_saved_queries",
                "displayName": "Get Saved Queries",
                "modelDescription": "List all saved telemetry queries in the workspace. **RECOMMENDED STEP** after discovering event IDs/schemas but before executing queries - check if the team already has proven queries for similar scenarios. This helps you reuse existing patterns that are known to work correctly. Each saved query includes purpose, use case, and tags for easy discovery. Use this when the user's question might match existing query patterns (errors, performance, specific features).",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "tags": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Filter by tags (optional)"
                        }
                    }
                }
            },
            {
                "name": "bctb_search_queries",
                "displayName": "Search Queries",
                "modelDescription": "Search saved queries by keywords. **RECOMMENDED STEP** after discovering event IDs/schemas - use this to find existing queries that match the user's intent (search terms like 'error', 'slow', 'login', 'report', etc). More targeted than get_saved_queries when you know what you're looking for. Returns matching queries with relevance scores so you can reuse proven patterns instead of writing KQL from scratch.",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "searchTerms": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Search terms"
                        }
                    },
                    "required": [
                        "searchTerms"
                    ]
                }
            },
            {
                "name": "bctb_save_query",
                "displayName": "Save Query",
                "modelDescription": "Save a telemetry query for future reference",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "Query name"
                        },
                        "kql": {
                            "type": "string",
                            "description": "KQL query string"
                        },
                        "purpose": {
                            "type": "string",
                            "description": "Query purpose"
                        },
                        "useCase": {
                            "type": "string",
                            "description": "When to use this query"
                        },
                        "tags": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Tags for categorization"
                        },
                        "category": {
                            "type": "string",
                            "description": "Category/folder for organization"
                        },
                        "companyName": {
                            "type": "string",
                            "description": "Company name if query is customer-specific (filters on aadTenantId or companyName). Query will be saved under queries/Companies/{companyName}/{category}/"
                        }
                    },
                    "required": [
                        "name",
                        "kql"
                    ]
                }
            },
            {
                "name": "bctb_get_categories",
                "displayName": "Get Query Categories",
                "modelDescription": "List all query categories (folders)",
                "inputSchema": {
                    "type": "object",
                    "properties": {}
                }
            },
            {
                "name": "bctb_get_recommendations",
                "displayName": "Get Query Recommendations",
                "modelDescription": "Get recommendations for improving a query based on saved query patterns and best practices. Use this after executing a query to suggest optimizations or find similar existing patterns that might work better.",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "kql": {
                            "type": "string",
                            "description": "KQL query to analyze"
                        },
                        "results": {
                            "type": "object",
                            "description": "Query results to analyze"
                        }
                    }
                }
            },
            {
                "name": "bctb_get_external_queries",
                "displayName": "Get External Query Examples",
                "modelDescription": "Get KQL examples from external references (GitHub, blogs)",
                "inputSchema": {
                    "type": "object",
                    "properties": {}
                }
            },
            {
                "name": "bctb_get_event_catalog",
                "displayName": "Get BC Event Catalog",
                "modelDescription": "Get a catalog of recent Business Central telemetry event IDs with descriptions, frequencies, and Learn URLs. **REQUIRED FIRST STEP** when user asks generic BC telemetry questions like 'show me errors', 'performance issues', 'what happened today', or any exploratory query where you don't know the exact event IDs. This tool discovers what events are actually firing in their environment. Returns event IDs sorted by frequency with status (success/error/too slow), short descriptions, occurrence counts, and Microsoft Learn documentation links. Use the catalog to identify relevant event IDs, then call get_event_schema to understand available fields, then build your KQL query.",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "daysBack": {
                            "type": "number",
                            "description": "Number of days to analyze (default: 10)",
                            "default": 10
                        },
                        "status": {
                            "type": "string",
                            "enum": [
                                "all",
                                "success",
                                "error",
                                "too slow",
                                "unknown"
                            ],
                            "description": "Filter by event status (default: all)",
                            "default": "all"
                        },
                        "minCount": {
                            "type": "number",
                            "description": "Minimum occurrence count to include (default: 1)",
                            "default": 1
                        }
                    }
                }
            },
            {
                "name": "bctb_get_event_schema",
                "displayName": "Get BC Event Schema",
                "modelDescription": "Get the schema (available customDimensions fields) for a specific event ID by sampling recent occurrences. **REQUIRED SECOND STEP** after get_event_catalog identifies relevant event IDs. BC telemetry stores most useful data in customDimensions (company name, user, duration, error messages, etc), but available fields vary by event type. This tool samples 100 recent events to show you what fields exist, their data types, and example values. Use this before writing KQL to ensure you reference correct field names and understand the data structure. Returns field list with examples and generates a sample query showing proper syntax.",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "eventId": {
                            "type": "string",
                            "description": "Event ID to analyze (e.g., AL0000E26)"
                        },
                        "sampleSize": {
                            "type": "number",
                            "description": "Number of events to sample (default: 100)",
                            "default": 100
                        }
                    },
                    "required": [
                        "eventId"
                    ]
                }
            },
            {
                "name": "bctb_get_tenant_mapping",
                "displayName": "Map Company Names to Tenant IDs",
                "modelDescription": "CRITICAL: Business Central telemetry uses aadTenantId (not company names) for filtering customers. When the user asks about a specific customer/company, you MUST call this tool first to map the company name to a tenant ID, then use that tenant ID in subsequent queries with: | where tostring(customDimensions.aadTenantId) == \"{tenantId}\". This ensures queries target the correct customer data.",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "daysBack": {
                            "type": "number",
                            "description": "Number of days to look back for company-to-tenant mappings (default: 10)",
                            "default": 10
                        },
                        "companyNameFilter": {
                            "type": "string",
                            "description": "Optional: Filter for specific company name (partial match, case-insensitive)"
                        }
                    }
                }
            }
        ],
        "configuration": {
            "title": "BC Telemetry Buddy",
            "properties": {
                "bctb.mcp.connectionName": {
                    "type": "string",
                    "default": "",
                    "description": "Friendly name for this telemetry connection"
                },
                "bctb.mcp.tenantId": {
                    "type": "string",
                    "default": "",
                    "description": "Azure tenant ID (not needed for azure_cli flow, which uses current az login session)"
                },
                "bctb.mcp.clientId": {
                    "type": "string",
                    "default": "",
                    "description": "Azure client ID (not needed for azure_cli or device_code flows, required for client_credentials)"
                },
                "bctb.mcp.authFlow": {
                    "type": "string",
                    "enum": [
                        "azure_cli",
                        "device_code",
                        "client_credentials"
                    ],
                    "default": "azure_cli",
                    "description": "Authentication flow to use (azure_cli uses 'az login' cached credentials, device_code requires browser login each time, client_credentials uses service principal)"
                },
                "bctb.mcp.applicationInsights.appId": {
                    "type": "string",
                    "default": "",
                    "description": "Application Insights application ID"
                },
                "bctb.mcp.kusto.clusterUrl": {
                    "type": "string",
                    "default": "",
                    "description": "Kusto cluster URL"
                },
                "bctb.mcp.cache.enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enable file-based caching"
                },
                "bctb.mcp.cache.ttlSeconds": {
                    "type": "number",
                    "default": 3600,
                    "description": "Cache TTL in seconds"
                },
                "bctb.mcp.sanitize.removePII": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable PII sanitization (opt-in)"
                },
                "bctb.mcp.port": {
                    "type": "number",
                    "default": 52345,
                    "description": "MCP server port"
                },
                "bctb.mcp.url": {
                    "type": "string",
                    "default": "http://localhost:52345",
                    "description": "MCP server URL"
                },
                "bctb.agent.maxRetries": {
                    "type": "number",
                    "default": 3,
                    "description": "Maximum retry attempts for failed queries"
                },
                "bctb.queries.folder": {
                    "type": "string",
                    "default": "queries",
                    "description": "Folder for saved KQL queries (relative to workspace root)"
                },
                "bctb.mcp.references": {
                    "type": "array",
                    "default": [],
                    "description": "External reference sources for KQL examples",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Reference name"
                            },
                            "type": {
                                "type": "string",
                                "enum": [
                                    "github",
                                    "web"
                                ],
                                "description": "Reference type"
                            },
                            "url": {
                                "type": "string",
                                "description": "Reference URL"
                            },
                            "enabled": {
                                "type": "boolean",
                                "description": "Enable this reference"
                            }
                        }
                    }
                }
            }
        }
    },
    "scripts": {
        "vscode:prepublish": "npm run build",
        "build": "tsc",
        "dev": "tsc --watch",
        "test": "jest",
        "test:coverage": "jest --coverage",
        "test:integration": "npm run build && node ./dist/test/runTest.js",
        "package": "vsce package",
        "clean": "rimraf dist out"
    },
    "dependencies": {
        "axios": "^1.6.0"
    },
    "devDependencies": {
        "@types/vscode": "^1.85.0",
        "@types/node": "^18.0.0",
        "@types/jest": "^29.5.0",
        "@vscode/test-electron": "^2.3.0",
        "jest": "^29.7.0",
        "ts-jest": "^29.1.0",
        "typescript": "^5.3.0",
        "@vscode/vsce": "^2.22.0",
        "rimraf": "^6.0.1"
    }
}
