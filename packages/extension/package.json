{
    "name": "bc-telemetry-buddy",
    "displayName": "BC Telemetry Buddy",
    "description": "Query Business Central telemetry from VSCode using natural language with GitHub Copilot",
    "version": "0.2.14",
    "publisher": "waldoBC",
    "license": "MIT",
    "icon": "images/waldo.png",
    "engines": {
        "vscode": "^1.85.0"
    },
    "categories": [
        "Other",
        "Data Science"
    ],
    "keywords": [
        "business-central",
        "telemetry",
        "application-insights",
        "kusto",
        "kql",
        "copilot"
    ],
    "activationEvents": [
        "onStartupFinished"
    ],
    "main": "./dist/extension.js",
    "repository": {
        "type": "git",
        "url": "https://github.com/waldo1001/waldo.BCTelemetryBuddy.git"
    },
    "bugs": {
        "url": "https://github.com/waldo1001/waldo.BCTelemetryBuddy/issues"
    },
    "homepage": "https://github.com/waldo1001/waldo.BCTelemetryBuddy#readme",
    "contributes": {
        "chatParticipants": [
            {
                "id": "bc-telemetry-buddy",
                "name": "bc-telemetry-buddy",
                "description": "Expert assistant for analyzing Business Central telemetry data using KQL, with deep knowledge of BC events and performance optimization. Automatically discovers events, understands schemas, and executes queries following best practices.",
                "isSticky": true,
                "commands": [],
                "sampleRequest": "Show me all errors from the last 24 hours for customer Acme Corp"
            }
        ],
        "languages": [
            {
                "id": "kql",
                "aliases": [
                    "Kusto Query Language",
                    "KQL"
                ],
                "extensions": [
                    ".kql"
                ],
                "configuration": "./language-configuration.json"
            }
        ],
        "commands": [
            {
                "command": "bctb.setupWizard",
                "title": "BC Telemetry Buddy: Setup Wizard",
                "icon": "$(gear)"
            },
            {
                "command": "bctb.startMCP",
                "title": "BC Telemetry Buddy: Start MCP Server"
            },
            {
                "command": "bctb.runKQLQuery",
                "title": "BC Telemetry Buddy: Run KQL Query"
            },
            {
                "command": "bctb.runKQLFromDocument",
                "title": "BC Telemetry Buddy: Run KQL From Document"
            },
            {
                "command": "bctb.saveQuery",
                "title": "BC Telemetry Buddy: Save Query"
            },
            {
                "command": "bctb.openQueriesFolder",
                "title": "BC Telemetry Buddy: Open Queries Folder"
            },
            {
                "command": "bctb.clearCache",
                "title": "BC Telemetry Buddy: Clear Cache"
            },
            {
                "command": "bctb.showCacheStats",
                "title": "BC Telemetry Buddy: Show Cache Statistics"
            },
            {
                "command": "bctb.installChatmode",
                "title": "BC Telemetry Buddy: Install Chatmode"
            }
        ],
        "mcpServerDefinitionProviders": [
            {
                "id": "bc-telemetry-buddy.mcp-server",
                "label": "BC Telemetry Buddy MCP Server"
            }
        ],
        "configuration": {
            "title": "BC Telemetry Buddy",
            "properties": {
                "bctb.mcp.connectionName": {
                    "type": "string",
                    "default": "",
                    "description": "Friendly name for this telemetry connection"
                },
                "bctb.mcp.tenantId": {
                    "type": "string",
                    "default": "",
                    "description": "Azure tenant ID (not needed for azure_cli flow, which uses current az login session)"
                },
                "bctb.mcp.clientId": {
                    "type": "string",
                    "default": "",
                    "description": "Azure client ID (not needed for azure_cli or device_code flows, required for client_credentials)"
                },
                "bctb.mcp.authFlow": {
                    "type": "string",
                    "enum": [
                        "azure_cli",
                        "device_code",
                        "client_credentials"
                    ],
                    "default": "azure_cli",
                    "description": "Authentication flow to use (azure_cli uses 'az login' cached credentials, device_code requires browser login each time, client_credentials uses service principal)"
                },
                "bctb.mcp.applicationInsights.appId": {
                    "type": "string",
                    "default": "",
                    "description": "Application Insights application ID"
                },
                "bctb.mcp.kusto.clusterUrl": {
                    "type": "string",
                    "default": "",
                    "description": "Kusto cluster URL"
                },
                "bctb.mcp.cache.enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enable file-based caching"
                },
                "bctb.mcp.cache.ttlSeconds": {
                    "type": "number",
                    "default": 3600,
                    "description": "Cache TTL in seconds"
                },
                "bctb.mcp.sanitize.removePII": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable PII sanitization (opt-in)"
                },
                "bctb.mcp.port": {
                    "type": "number",
                    "default": 52345,
                    "description": "MCP server port"
                },
                "bctb.mcp.url": {
                    "type": "string",
                    "default": "http://localhost:52345",
                    "description": "MCP server URL"
                },
                "bctb.agent.maxRetries": {
                    "type": "number",
                    "default": 3,
                    "description": "Maximum retry attempts for failed queries"
                },
                "bctb.queries.folder": {
                    "type": "string",
                    "default": "queries",
                    "description": "Folder for saved KQL queries (relative to workspace root)"
                },
                "bctb.mcp.references": {
                    "type": "array",
                    "default": [],
                    "description": "External reference sources for KQL examples",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Reference name"
                            },
                            "type": {
                                "type": "string",
                                "enum": [
                                    "github",
                                    "web"
                                ],
                                "description": "Reference type"
                            },
                            "url": {
                                "type": "string",
                                "description": "Reference URL"
                            },
                            "enabled": {
                                "type": "boolean",
                                "description": "Enable this reference"
                            }
                        }
                    }
                }
            }
        }
    },
    "scripts": {
        "vscode:prepublish": "npm run build && npm run copy-mcp",
        "build": "esbuild src/extension.ts --bundle --outfile=dist/extension.js --external:vscode --format=cjs --platform=node --sourcemap --minify && npm run copy-mcp",
        "dev": "esbuild src/extension.ts --bundle --outfile=dist/extension.js --external:vscode --format=cjs --platform=node --sourcemap --watch",
        "compile": "tsc --noEmit",
        "compile-tests": "tsc -p ./ --outDir dist",
        "test": "jest",
        "test:coverage": "jest --coverage",
        "test:integration": "npm run build && npm run compile-tests && node ./dist/test/runTest.js",
        "copy-mcp": "node -e \"const fs=require('fs');const path=require('path');const targetDir=path.join(__dirname,'mcp','dist');fs.mkdirSync(targetDir,{recursive:true});fs.copyFileSync(path.join(__dirname,'..','mcp','dist','server.js'),path.join(targetDir,'server.js'));fs.copyFileSync(path.join(__dirname,'..','mcp','dist','launcher.js'),path.join(targetDir,'launcher.js'));console.log('Copied MCP server bundle to extension/mcp/dist/')\"",
        "package": "vsce package",
        "clean": "rimraf dist out mcp"
    },
    "dependencies": {
        "@azure/msal-node": "^3.8.0",
        "axios": "^1.6.0"
    },
    "devDependencies": {
        "@types/jest": "^30.0.0",
        "@types/node": "^22.18.11",
        "@types/vscode": "^1.85.0",
        "@vscode/test-electron": "^2.3.0",
        "@vscode/vsce": "^3.2.1",
        "esbuild": "^0.24.0",
        "jest": "^29.7.0",
        "rimraf": "^6.0.1",
        "ts-jest": "^29.1.0",
        "typescript": "^5.3.0"
    }
}
